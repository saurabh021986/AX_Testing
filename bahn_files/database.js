(()=>{function e(){return window.unifiedSDK}function a(){const a={},{logger:t}=e();let o=null,s={},i=[];return a.initializeDatabase=({databaseName:e,databaseVersion:a,upgrades:n=[]})=>{if("string"!=typeof e)throw new Error("Invalid Argument: databaseName has to be a string, got: "+typeof e);if("number"!=typeof a)throw new Error("Invalid Argument: databaseVersion has to be a number, got: "+typeof a);s={databaseName:e,databaseVersion:a,upgrades:n}},a.openDatabase=e=>(i.includes(e)||i.push(e),o?Promise.resolve(o):new Promise(((e,a)=>{const n=window.indexedDB.open(s.databaseName,s.databaseVersion);n.onupgradeneeded=async({target:e,oldVersion:a,newVersion:n})=>{t.info(`indexedDB "${s.databaseName}" v${a} needs upgrade to v${n}`);for(const r in s.upgrades){const o=Number(r)+1,i=s.upgrades[r];o>a&&o<=n&&(await i(e.result),t.info(`indexedDB "${s.databaseName}" upgraded to v${o}`))}},n.onsuccess=({target:a})=>{t.debug(`indexedDB "${s.databaseName}" opened`),o=a.result,e(o)},n.onerror=e=>a(e.error),n.onclose=()=>{t.debug(`indexedDB "${s.databaseName}" closed`),o=null}}))),a.closeDatabase=(e=null)=>{i=null===e?[]:i.filter((a=>a!=e)),o&&!i.length&&(o.close(),o=null)},a.isConnected=()=>!!o,a.getDatabase=()=>o,a.deleteDatabase=async()=>(i=[],await a.closeDatabase(),n(window.indexedDB.deleteDatabase(s.databaseName))),a.getObjectStore=t=>function(a,t){const o={};return o.runTransaction=(n,r,o={})=>{const s=a.getDatabase();if(!s)throw new Error("Can't run transaction. IndexedDB is not connected");try{const e=s.transaction(t,n,o);return r(e.objectStore(t),e)}catch(a){if("InvalidStateError"===a.name){const{logger:n}=e();return n.warn(`IndexedDB transaction failed: ${a.message}`),new Promise((()=>{}))}return Promise.reject(a)}},o.add=(e,a=null)=>o.runTransaction("readwrite",(r=>n(r.add(e,a)))),o.clear=()=>o.runTransaction("readwrite",(e=>n(e.clear()))),o.count=e=>o.runTransaction("readonly",(a=>n(a.count(e)))),o.delete=e=>o.runTransaction("readwrite",(a=>n(a.delete(e)))),o.get=e=>o.runTransaction("readonly",(a=>n(a.get(e)))),o.getAll=(e,a)=>o.runTransaction("readonly",(r=>n(r.getAll(e,a)))),o.getAllKeys=(e,a)=>o.runTransaction("readwrite",(r=>n(r.getAllKeys(e,a)))),o.getKey=e=>o.runTransaction("readwrite",(a=>n(a.getKey(e)))),o.openCursor=(e,a,{query:n=null,direction:t="next"}={})=>o.runTransaction(e,(e=>r(e.openCursor(n,t),a))),o.openKeyCursor=(e,a,{query:n=null,direction:t="next"}={})=>o.runTransaction(e,(e=>r(e.openKeyCursor(n,t),a))),o.put=(e,a)=>o.runTransaction("readwrite",(r=>n(r.put(e,a)))),o}(a,t),a}function n(e){return new Promise(((a,n)=>{e.onsuccess=e=>a(e.target.result),e.onerror=e=>n(e.error)}))}function r(e,a){return new Promise(((n,r)=>{e.onsuccess=({target:e})=>{const r=e.result;r?a(r,null):n()},e.onerror=e=>r(e.error)}))}function t(){const{config:a}=e();return[e=>{const{idsite:n}=a.getConfig("recordingEngine"),r=`pages_${n}`;e.createObjectStore(r,{keyPath:"pageId"}).createIndex("siteId","siteId",{unique:!1}),e.createObjectStore("scoring",{keyPath:"indicator"})}]}const{loader:o}=e();o.resolveModule("database",(async()=>{const e=a();return await e.initializeDatabase({databaseName:"uws-database",databaseVersion:1,upgrades:t()}),e}))})();